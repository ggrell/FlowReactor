apply plugin: 'java-library'
apply plugin: 'kotlin'
apply plugin: 'jacoco'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'io.gitlab.arturbosch.detekt'

dependencies {
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:${versions.detekt}"

    implementation deps.kotlin.stdlib.common
    implementation deps.kotlin.coroutines.core

    testImplementation deps.junit
    testImplementation deps.kotlin.coroutines.test
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/docs/javadoc"
}

jacoco {
    toolVersion = versions.jacoco
}

jacocoTestReport {
    reports {
        xml.enabled = true
    }
}

detekt {
    config = files("detekt.yml")
    baseline = file("detekt-baseline.xml")
    buildUponDefaultConfig = true
    reports {
        xml {
            enabled = true
            destination = file("build/reports/detekt/detekt.xml")
        }
        html {
            enabled = true
            destination = file("build/reports/detekt/detekt.html")
        }
        txt {
            enabled = false
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: dokka) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
